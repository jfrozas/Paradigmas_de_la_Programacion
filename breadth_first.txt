open G_tree;;


let rec breadth_first = function
Gt (x, []) -> [x]
| Gt (x, (Gt (y, t2))::t1) -> x :: breadth_first (Gt (y, t1@t2));;


let rec breadth_first_t t =
  let rec aux acum = function
      Gt (x, []) -> List.rev (x::acum)
    | Gt (x, (Gt (y, t2))::t1) -> aux (x::acum) (Gt (y, List.rev_append (List.rev t1) t2))
  in aux [] t;;
  
  
let rec init = function i -> function f ->
  let rec init_aux = (function (l, n, m) ->
    if n > m then init_aux ((f m)::l, n, m + 1) else l)
  in init_aux ([], i, 0);;  
  
let t = Gt(0, init 150000 (fun x -> Gt(x, [])));;
